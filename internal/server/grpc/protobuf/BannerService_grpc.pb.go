// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: BannerService.proto

package internalgrpcprotobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BannerService_AddSlot_FullMethodName                   = "/banner.BannerService/AddSlot"
	BannerService_GetSlot_FullMethodName                   = "/banner.BannerService/GetSlot"
	BannerService_AddBanner_FullMethodName                 = "/banner.BannerService/AddBanner"
	BannerService_GetBanner_FullMethodName                 = "/banner.BannerService/GetBanner"
	BannerService_AddGroup_FullMethodName                  = "/banner.BannerService/AddGroup"
	BannerService_GetGroup_FullMethodName                  = "/banner.BannerService/GetGroup"
	BannerService_AddBannerGroupStats_FullMethodName       = "/banner.BannerService/AddBannerGroupStats"
	BannerService_GetBannerGroupStats_FullMethodName       = "/banner.BannerService/GetBannerGroupStats"
	BannerService_RegisterClick_FullMethodName             = "/banner.BannerService/RegisterClick"
	BannerService_GetBannerByMultiArmBandit_FullMethodName = "/banner.BannerService/GetBannerByMultiArmBandit"
)

// BannerServiceClient is the client API for BannerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannerServiceClient interface {
	AddSlot(ctx context.Context, in *RequestAddSlot, opts ...grpc.CallOption) (*ResponseSlot, error)
	GetSlot(ctx context.Context, in *RequestGetSlot, opts ...grpc.CallOption) (*ResponseSlot, error)
	AddBanner(ctx context.Context, in *RequestAddBanner, opts ...grpc.CallOption) (*ResponseBanner, error)
	GetBanner(ctx context.Context, in *RequestGetBanner, opts ...grpc.CallOption) (*ResponseBanner, error)
	AddGroup(ctx context.Context, in *RequestAddGroup, opts ...grpc.CallOption) (*ResponseGroup, error)
	GetGroup(ctx context.Context, in *RequestGetGroup, opts ...grpc.CallOption) (*ResponseGroup, error)
	AddBannerGroupStats(ctx context.Context, in *RequestAddBannerGroupStats, opts ...grpc.CallOption) (*ResponseBannerGroupStats, error)
	GetBannerGroupStats(ctx context.Context, in *RequestGetBannerGroupStats, opts ...grpc.CallOption) (*ResponseBannerGroupStats, error)
	RegisterClick(ctx context.Context, in *RequestRegisterClick, opts ...grpc.CallOption) (*ResponseRegisterClick, error)
	GetBannerByMultiArmBandit(ctx context.Context, in *RequestGetBannerByMultiArmBandit, opts ...grpc.CallOption) (*ResponseBanner, error)
}

type bannerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBannerServiceClient(cc grpc.ClientConnInterface) BannerServiceClient {
	return &bannerServiceClient{cc}
}

func (c *bannerServiceClient) AddSlot(ctx context.Context, in *RequestAddSlot, opts ...grpc.CallOption) (*ResponseSlot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseSlot)
	err := c.cc.Invoke(ctx, BannerService_AddSlot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) GetSlot(ctx context.Context, in *RequestGetSlot, opts ...grpc.CallOption) (*ResponseSlot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseSlot)
	err := c.cc.Invoke(ctx, BannerService_GetSlot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) AddBanner(ctx context.Context, in *RequestAddBanner, opts ...grpc.CallOption) (*ResponseBanner, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBanner)
	err := c.cc.Invoke(ctx, BannerService_AddBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) GetBanner(ctx context.Context, in *RequestGetBanner, opts ...grpc.CallOption) (*ResponseBanner, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBanner)
	err := c.cc.Invoke(ctx, BannerService_GetBanner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) AddGroup(ctx context.Context, in *RequestAddGroup, opts ...grpc.CallOption) (*ResponseGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseGroup)
	err := c.cc.Invoke(ctx, BannerService_AddGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) GetGroup(ctx context.Context, in *RequestGetGroup, opts ...grpc.CallOption) (*ResponseGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseGroup)
	err := c.cc.Invoke(ctx, BannerService_GetGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) AddBannerGroupStats(ctx context.Context, in *RequestAddBannerGroupStats, opts ...grpc.CallOption) (*ResponseBannerGroupStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBannerGroupStats)
	err := c.cc.Invoke(ctx, BannerService_AddBannerGroupStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) GetBannerGroupStats(ctx context.Context, in *RequestGetBannerGroupStats, opts ...grpc.CallOption) (*ResponseBannerGroupStats, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBannerGroupStats)
	err := c.cc.Invoke(ctx, BannerService_GetBannerGroupStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) RegisterClick(ctx context.Context, in *RequestRegisterClick, opts ...grpc.CallOption) (*ResponseRegisterClick, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseRegisterClick)
	err := c.cc.Invoke(ctx, BannerService_RegisterClick_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannerServiceClient) GetBannerByMultiArmBandit(ctx context.Context, in *RequestGetBannerByMultiArmBandit, opts ...grpc.CallOption) (*ResponseBanner, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseBanner)
	err := c.cc.Invoke(ctx, BannerService_GetBannerByMultiArmBandit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannerServiceServer is the server API for BannerService service.
// All implementations must embed UnimplementedBannerServiceServer
// for forward compatibility.
type BannerServiceServer interface {
	AddSlot(context.Context, *RequestAddSlot) (*ResponseSlot, error)
	GetSlot(context.Context, *RequestGetSlot) (*ResponseSlot, error)
	AddBanner(context.Context, *RequestAddBanner) (*ResponseBanner, error)
	GetBanner(context.Context, *RequestGetBanner) (*ResponseBanner, error)
	AddGroup(context.Context, *RequestAddGroup) (*ResponseGroup, error)
	GetGroup(context.Context, *RequestGetGroup) (*ResponseGroup, error)
	AddBannerGroupStats(context.Context, *RequestAddBannerGroupStats) (*ResponseBannerGroupStats, error)
	GetBannerGroupStats(context.Context, *RequestGetBannerGroupStats) (*ResponseBannerGroupStats, error)
	RegisterClick(context.Context, *RequestRegisterClick) (*ResponseRegisterClick, error)
	GetBannerByMultiArmBandit(context.Context, *RequestGetBannerByMultiArmBandit) (*ResponseBanner, error)
	mustEmbedUnimplementedBannerServiceServer()
}

// UnimplementedBannerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBannerServiceServer struct{}

func (UnimplementedBannerServiceServer) AddSlot(context.Context, *RequestAddSlot) (*ResponseSlot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSlot not implemented")
}
func (UnimplementedBannerServiceServer) GetSlot(context.Context, *RequestGetSlot) (*ResponseSlot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlot not implemented")
}
func (UnimplementedBannerServiceServer) AddBanner(context.Context, *RequestAddBanner) (*ResponseBanner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBanner not implemented")
}
func (UnimplementedBannerServiceServer) GetBanner(context.Context, *RequestGetBanner) (*ResponseBanner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanner not implemented")
}
func (UnimplementedBannerServiceServer) AddGroup(context.Context, *RequestAddGroup) (*ResponseGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (UnimplementedBannerServiceServer) GetGroup(context.Context, *RequestGetGroup) (*ResponseGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedBannerServiceServer) AddBannerGroupStats(context.Context, *RequestAddBannerGroupStats) (*ResponseBannerGroupStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBannerGroupStats not implemented")
}
func (UnimplementedBannerServiceServer) GetBannerGroupStats(context.Context, *RequestGetBannerGroupStats) (*ResponseBannerGroupStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBannerGroupStats not implemented")
}
func (UnimplementedBannerServiceServer) RegisterClick(context.Context, *RequestRegisterClick) (*ResponseRegisterClick, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClick not implemented")
}
func (UnimplementedBannerServiceServer) GetBannerByMultiArmBandit(context.Context, *RequestGetBannerByMultiArmBandit) (*ResponseBanner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBannerByMultiArmBandit not implemented")
}
func (UnimplementedBannerServiceServer) mustEmbedUnimplementedBannerServiceServer() {}
func (UnimplementedBannerServiceServer) testEmbeddedByValue()                       {}

// UnsafeBannerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannerServiceServer will
// result in compilation errors.
type UnsafeBannerServiceServer interface {
	mustEmbedUnimplementedBannerServiceServer()
}

func RegisterBannerServiceServer(s grpc.ServiceRegistrar, srv BannerServiceServer) {
	// If the following call pancis, it indicates UnimplementedBannerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BannerService_ServiceDesc, srv)
}

func _BannerService_AddSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddSlot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).AddSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_AddSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).AddSlot(ctx, req.(*RequestAddSlot))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_GetSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetSlot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).GetSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_GetSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).GetSlot(ctx, req.(*RequestGetSlot))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_AddBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddBanner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).AddBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_AddBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).AddBanner(ctx, req.(*RequestAddBanner))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_GetBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetBanner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).GetBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_GetBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).GetBanner(ctx, req.(*RequestGetBanner))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_AddGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).AddGroup(ctx, req.(*RequestAddGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_GetGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).GetGroup(ctx, req.(*RequestGetGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_AddBannerGroupStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddBannerGroupStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).AddBannerGroupStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_AddBannerGroupStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).AddBannerGroupStats(ctx, req.(*RequestAddBannerGroupStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_GetBannerGroupStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetBannerGroupStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).GetBannerGroupStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_GetBannerGroupStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).GetBannerGroupStats(ctx, req.(*RequestGetBannerGroupStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_RegisterClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegisterClick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).RegisterClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_RegisterClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).RegisterClick(ctx, req.(*RequestRegisterClick))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannerService_GetBannerByMultiArmBandit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetBannerByMultiArmBandit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannerServiceServer).GetBannerByMultiArmBandit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BannerService_GetBannerByMultiArmBandit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannerServiceServer).GetBannerByMultiArmBandit(ctx, req.(*RequestGetBannerByMultiArmBandit))
	}
	return interceptor(ctx, in, info, handler)
}

// BannerService_ServiceDesc is the grpc.ServiceDesc for BannerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BannerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banner.BannerService",
	HandlerType: (*BannerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSlot",
			Handler:    _BannerService_AddSlot_Handler,
		},
		{
			MethodName: "GetSlot",
			Handler:    _BannerService_GetSlot_Handler,
		},
		{
			MethodName: "AddBanner",
			Handler:    _BannerService_AddBanner_Handler,
		},
		{
			MethodName: "GetBanner",
			Handler:    _BannerService_GetBanner_Handler,
		},
		{
			MethodName: "AddGroup",
			Handler:    _BannerService_AddGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _BannerService_GetGroup_Handler,
		},
		{
			MethodName: "AddBannerGroupStats",
			Handler:    _BannerService_AddBannerGroupStats_Handler,
		},
		{
			MethodName: "GetBannerGroupStats",
			Handler:    _BannerService_GetBannerGroupStats_Handler,
		},
		{
			MethodName: "RegisterClick",
			Handler:    _BannerService_RegisterClick_Handler,
		},
		{
			MethodName: "GetBannerByMultiArmBandit",
			Handler:    _BannerService_GetBannerByMultiArmBandit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BannerService.proto",
}
